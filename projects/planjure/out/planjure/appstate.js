// Compiled by ClojureScript 0.0-2280
goog.provide('planjure.appstate');
goog.require('cljs.core');
goog.require('cljs.core.async');
goog.require('cljs.core.async');
goog.require('planjure.plan');
goog.require('planjure.plan');
goog.require('om.core');
goog.require('om.core');
planjure.appstate.app_state = cljs.core.atom.call(null,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.Keyword(null,"brush-size","brush-size",1861153315),new cljs.core.Keyword(null,"brush","brush",498034117),new cljs.core.Keyword(null,"last-run-time","last-run-time",-1669306555),new cljs.core.Keyword(null,"mouse-pos","mouse-pos",370762057),new cljs.core.Keyword(null,"brush-options","brush-options",1088324874),new cljs.core.Keyword(null,"visited","visited",-1610853875),new cljs.core.Keyword(null,"canvas","canvas",-1798817489),new cljs.core.Keyword(null,"setup","setup",1987730512),new cljs.core.Keyword(null,"world","world",-418292623),new cljs.core.Keyword(null,"replan","replan",-490224302),new cljs.core.Keyword(null,"last-cost","last-cost",747751156),new cljs.core.Keyword(null,"world-size","world-size",-1891482119),new cljs.core.Keyword(null,"draw-visited","draw-visited",-4331685),new cljs.core.Keyword(null,"mouse-drawing","mouse-drawing",-404132674),new cljs.core.Keyword(null,"algo","algo",1472048382),new cljs.core.Keyword(null,"world-size-options","world-size-options",-1738219810),new cljs.core.Keyword(null,"mouse-moving-setup","mouse-moving-setup",1151833279),new cljs.core.Keyword(null,"brush-size-options","brush-size-options",1610347807)],[cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"size3","size3",-1330955658),new cljs.core.Keyword(null,"brush","brush",498034117),(0),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"brush","brush",498034117),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Brush"], null),new cljs.core.Keyword(null,"eraser","eraser",-1052061125),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",-1790561697),"Eraser"], null)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"width","width",-384071477),(400),new cljs.core.Keyword(null,"height","height",1025178622),(400)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"start","start",-355208981),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(0)], null),new cljs.core.Keyword(null,"finish","finish",-586688046),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(19),(19)], null)], null),planjure.plan.random_world.call(null,(20),(20)),false,(0),new cljs.core.Keyword(null,"small","small",2133478704),false,false,new cljs.core.Keyword(null,"dijkstra","dijkstra",-1945050732),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"small","small",2133478704),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"text","text",-1790561697),"Small",new cljs.core.Keyword(null,"size","size",1098693007),(20),new cljs.core.Keyword(null,"tile-size-px","tile-size-px",473390826),(20)], null),new cljs.core.Keyword(null,"medium","medium",-1864319384),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"text","text",-1790561697),"Medium",new cljs.core.Keyword(null,"size","size",1098693007),(40),new cljs.core.Keyword(null,"tile-size-px","tile-size-px",473390826),(10)], null),new cljs.core.Keyword(null,"large","large",-196820544),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"text","text",-1790561697),"Large",new cljs.core.Keyword(null,"size","size",1098693007),(100),new cljs.core.Keyword(null,"tile-size-px","tile-size-px",473390826),(4)], null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"start","start",-355208981),false,new cljs.core.Keyword(null,"finish","finish",-586688046),false], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"size1","size1",-892028769),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"text","text",-1790561697),"1",new cljs.core.Keyword(null,"matrix","matrix",803137200),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1)], null)], null)], null),new cljs.core.Keyword(null,"size2","size2",-1219108726),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"text","text",-1790561697),"2",new cljs.core.Keyword(null,"matrix","matrix",803137200),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(0)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(1),(1)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(0)], null)], null)], null),new cljs.core.Keyword(null,"size3","size3",-1330955658),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"text","text",-1790561697),"3",new cljs.core.Keyword(null,"matrix","matrix",803137200),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(1),(1),(0)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(1),(2),(1),(1)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(2),(2),(1)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(1),(2),(1),(1)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(1),(1),(0)], null)], null)], null)], null)]));
planjure.appstate.plan_chan = cljs.core.async.chan.call(null);
/**
* Update world state given app-state cursor or atom.
*/
planjure.appstate.update_world_state_BANG_ = (function update_world_state_BANG_(app_state,new_world){if(om.core.cursor_QMARK_.call(null,app_state))
{return om.core.update_BANG_.call(null,app_state,new cljs.core.Keyword(null,"world","world",-418292623),new_world);
} else
{return cljs.core.swap_BANG_.call(null,app_state,cljs.core.assoc,new cljs.core.Keyword(null,"world","world",-418292623),new_world);
}
});

//# sourceMappingURL=appstate.js.map